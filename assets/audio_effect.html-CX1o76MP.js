import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,c as p,b as i,e as d,w as s,f as h,o as r,d as l}from"./app-YuhFUzAK.js";const B="/Wana_blog/assets/images/audio-effect/Fourier.gif",g={},y=h('<p>在音频处理的领域中，Python凭借其功能强大的库和简洁直观的语法，成为众多开发者进行音频处理工作的得力工具。<span class="spoiler" tabindex="-1">并不，你见过哪个搞音乐的用Python？然而我是程序员，我用</span></p><p>本篇博客将简要介绍如何借助Python处理音频文件，以及记录几个比较实用的音频处理函数 <s>（加特效函数）</s>。</p><p>我们主要利用Python中的<code>numpy</code>、<code>librosa</code>、<code>soundfile</code>和<code>pydub</code>库来辅助处理音频文件。</p>',3),o={class:"hint-container tip"},c=i("p",{class:"hint-container-title"},"提示",-1),A=i("p",null,"如果你没有安装这四个库，请先运行库安装命令：",-1),F=i("div",{class:"language-powershell line-numbers-mode","data-highlighter":"shiki","data-ext":"powershell","data-title":"powershell",style:{"--shiki-light":"#24292e","--shiki-dark":"#abb2bf","--shiki-light-bg":"#fff","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes github-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},"pip install numpy librosa soundfile pydub")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1),E=i("div",{class:"language-powershell line-numbers-mode","data-highlighter":"shiki","data-ext":"powershell","data-title":"powershell",style:{"--shiki-light":"#24292e","--shiki-dark":"#abb2bf","--shiki-light-bg":"#fff","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes github-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},"conda install numpy librosa soundfile pydub")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1),u=h('<h2 id="mp3-vs-wav" tabindex="-1"><a class="header-anchor" href="#mp3-vs-wav"><span>MP3 vs. WAV</span></a></h2><p>在进行音频处理是，通常都需要将待处理的音频文件格式转为WAV格式，这是为什么呢？WAV格式和平时最常见的音频格式MP3有什么区别呢？</p><p><strong>MP3</strong>，全称 MPEG-1 Audio Layer 3，是一种<strong>有损</strong>压缩格式，它通过剔除人耳难以察觉的音频信息，以此来大幅减小文件体积。这种特性使得MP3在存储空间和网络传输方面展现出显著优势，因此在音乐播放、在线音频等诸多场景中得到了极为广泛的应用。不过，这种压缩方式不可避免地会造成一定程度的音频质量损耗。</p><p><strong>WAV</strong> —— Waveform Audio File Format ——格式则属于<strong>无损</strong>音频格式，它能够完整保留原始音频的全部信息，确保音频质量达到极高水准。在音频处理过程中，我们常常需要对音频进行精准操作，诸如调整频率、添加特效等。这就要求音频文件能够提供完整且精确的音频数据。WAV格式由于具备无损的特性，恰好能够充分满足这一严苛需求。所以，在音频处理时，我们通常会优先选用WAV格式文件。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>除了上文提到的音频格式，还有几种在音频领域占据重要地位的常见格式。</p><ul><li><p><strong>Flac</strong>，即 Free Lossless Audio Codec，属于无损音频格式，它能够在不损失任何音频数据的前提下压缩音频文件，确保还原出与原始音频一模一样的音质，常被音乐发烧友用于高品质音乐收藏。</p></li><li><p><strong>Ogg</strong>，确切说是 Ogg Vorbis，是一种开源的有损音频格式，其压缩算法在中低码率下能展现出优秀的音质表现，在网络音频流传输，如在线音乐播放、网络电台广播等场景中应用广泛。</p></li><li><p><strong>Avc</strong>，准确来讲是 Advanced Video Coding，它主要用于视频中的音频编码，常与视频轨道一同封装在视频文件中，是有损编码，在兼顾视频画面质量的同时，对音频进行高效压缩，适配多种视频播放平台与设备。</p></li><li><p><strong>Mka</strong>，即 Matroska Audio，是 Matroska 多媒体容器格式的音频部分，它可以容纳多种音频编码，无损、有损皆可，在多媒体编辑、高清音频存储等方面有独特优势，比如能灵活处理多声道音频。</p></li></ul></div><h2 id="频域分析" tabindex="-1"><a class="header-anchor" href="#频域分析"><span>频域分析</span></a></h2><p>这一部分的音频处理函数基于音频的频域信号，因此需要简要介绍时域、频域的概念，以及傅里叶变换。</p><p>时域描述的是信号随时间变化的情况，我们日常听到的声音，直观感受就是其在时域上的表现，比如声音的强弱随时间起伏。而频域则是从频率的角度来分析信号，它展示了不同频率成分在信号中的占比情况。​</p><p>傅里叶变换就像是一座桥梁，能够将时域信号转换为频域信号，反之，逆傅里叶变换可以把频域信号还原为时域信号。通过傅里叶变换，我们能把复杂的时域音频信号分解成不同频率的正弦和余弦波的组合，这对于音频处理非常关键，因为许多音频特效和滤波操作都是基于对频域信号的调整来实现的。</p><figure><img src="'+B+`" alt="傅里叶变换（Fourier transform）" width="500" tabindex="0" loading="lazy"><figcaption>傅里叶变换（Fourier transform）</figcaption></figure><h3 id="模拟电话音效" tabindex="-1"><a class="header-anchor" href="#模拟电话音效"><span>模拟电话音效</span></a></h3><p>模拟电话音效的实现，主要基于对音频频域的精确操作。</p><p>电话音效的特点是频率范围相对较窄，通常集中在 300Hz - 3000Hz 之间。通过傅里叶变换将音频信号转换到频域后，我们创建掩码来<strong>筛选特定频段</strong>（带通滤波）。保留 300Hz - 3000Hz 这个频段的信号，同时将低于 300Hz 和高于 3000Hz 的频段信号设为 0，这样就去除了电话音效范围外的频率成分。并且，还可以通过增强因子对保留的频段进行适当增强，从而模拟出更具特色的电话音效。</p><p>主要实现思路为：</p><ol><li>运用<code>librosa.load</code>函数加载音频文件，获取音频数据<code>y</code>以及采样率<code>sr</code>。</li><li>对音频数据执行傅里叶变换（FFT），将时域信号转换为频域信号<code>Y</code>，与此同时获取对应的频率数组<code>freq</code>。</li><li>创建频段掩码<code>band_mask</code>，以此筛选出需要去除的频率范围（即低于<code>low_freq</code>和高于<code>high_freq</code>的部分），并将这些频段的频域数据设置为0。</li><li>创建中间频段掩码<code>mid_band_mask</code>，筛选出需要保留并增强的频段（也就是<code>low_freq</code>到<code>high_freq</code>之间的部分），然后将该频段的频域数据乘以<code>enhancement_factor</code>。</li><li>对处理完毕的频域数据进行逆傅里叶变换（IFFT），将其转换回时域信号<code>y_new</code>，并取实部。</li><li>利用<code>soundfile.write</code>函数将处理后的音频数据写入输出文件。</li></ol><p>用Python写出来就是：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> apply_phone_filter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">input_file</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">output_file</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">                       low_freq</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">high_freq</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">enhancement_factor</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    模拟电话音效：仅保留特定频段并可增强该频段。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    :param input_file: 输入音频文件路径</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    :param output_file: 处理后音频文件路径</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    :param low_freq: 低频截止</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    :param high_freq: 高频截止</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    :param enhancement_factor: 增强中间频段的倍数</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    y, sr </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> librosa.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(input_file, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">sr</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">48000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    Y </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> np.fft.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">fft</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(y)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    freq </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> np.fft.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">fftfreq</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(y), </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">sr)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    band_mask </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (np.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(freq) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> low_freq) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (np.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(freq) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> high_freq)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    Y[band_mask] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    mid_band_mask </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (np.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(freq) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> low_freq) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (np.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(freq) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> high_freq)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    Y[mid_band_mask] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> enhancement_factor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    y_new </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> np.fft.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">ifft</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(Y)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    y_new </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> np.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">real</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(y_new)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    sf.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(output_file, y_new, sr)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="回声-眩晕-效果" tabindex="-1"><a class="header-anchor" href="#回声-眩晕-效果"><span>回声（眩晕）效果</span></a></h3><p>回声效果的实现基于频域中的信号延迟和衰减原理。</p><p>在频域中，通过对原始音频信号进行一定时间的<strong>延迟</strong>（由delay_seconds决定延迟时间），并乘以衰减系数decay_factor来模拟回声随着距离和时间<strong>逐渐减弱</strong>的特性。将延迟衰减后的回声频域信号与原始频域信号相加，再通过逆傅里叶变换转换回时域，就得到了带有回声效果的音频信号。</p><p>主要实现思路为：</p><ol><li>同样使用<code>librosa.load</code>函数加载音频文件，获取音频数据<code>y</code>和采样率<code>sr</code>。</li><li>进行傅里叶变换，得到频域信号<code>Y</code>和频率数组<code>freq</code>。</li><li>根据设定的延迟时间<code>delay_seconds</code>，计算出延迟的采样点数<code>delay_samples</code>。</li><li>对频域信号进行延迟操作（借助<code>np.roll</code>函数），并乘以衰减系数<code>decay_factor</code>，从而得到回声的频域信号<code>Y_echo</code>。</li><li>将回声的频域信号与原始频域信号相加，得到处理后的频域信号<code>Y</code>。</li><li>进行逆傅里叶变换并取实部，得到处理后的时域信号<code>y_new</code>。</li><li>最后使用<code>soundfile.write</code>函数将处理后的音频写入输出文件。</li></ol><p>用Python写出来就是：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> apply_dizzy_effect</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">input_file</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">output_file</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">delay_seconds</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0.01</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">decay_factor</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0.6</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    添加回声（眩晕）效果。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    :param input_file: 输入音频文件路径</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    :param output_file: 处理后音频文件路径</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    :param delay_seconds: 回声延迟时间（秒）</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    :param decay_factor: 回声衰减系数</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    y, sr </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> librosa.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(input_file, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">sr</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">48000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    Y </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> np.fft.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">fft</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(y)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    freq </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> np.fft.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">fftfreq</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(y), </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">sr)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    delay_samples </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(delay_seconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> sr)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    Y_echo </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> np.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">roll</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(Y, delay_samples) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> decay_factor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    Y </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> Y_echo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    y_new </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> np.fft.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">ifft</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(Y)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    y_new </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> np.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">real</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(y_new)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    sf.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(output_file, y_new, sr)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p>博主为什么要在这里加一个 <em>眩晕</em> 呢？因为博主实际听完发现，施加该效果后，</p><ul><li>如果延迟时间较小（如0.01），歌曲振幅会周期性地忽大忽小；</li><li>如果延迟时间较大（如0.1），歌曲会有“断断续续”的感觉；</li><li>如果延迟时间中等（如0.05），则会有明显的抖动感（就像边捶胸口边发出声音）。</li></ul><p>所以与其叫回声效果，还不如叫眩晕效果，这更能描述实际听感。<span class="spoiler" tabindex="-1">回声效果还不如下面的带状滤波做得好</span></p></div><h3 id="移除特定频率" tabindex="-1"><a class="header-anchor" href="#移除特定频率"><span>移除特定频率</span></a></h3><p>移除特定频率的操作是通过对频域信号的逐个检查来实现的。</p><p>根据设定的cut_freq，我们可以将频域中的频率看作是一系列以cut_freq为间隔的区间。对于每个频率点，计算其与cut_freq的余数remainder。如果余数在half_width范围内，或者大于(cut_freq - half_width)，则认为该频率点属于需要移除的频率范围——与cut_freq足够接近，将其对应的频域信号设为 0，以此达到<strong>移除特定频率</strong>的目的（带状滤波）。</p><p>主要实现思路为：</p><ol><li>加载音频文件，获取音频数据<code>y</code>和采样率<code>sr</code>，并进行傅里叶变换，得到频域信号<code>Y</code>和频率数组<code>freq</code>。</li><li>遍历频域信号的每个元素，计算其对应的频率<code>f</code>。</li><li>计算频率<code>f</code>与<code>cut_freq</code>的余数<code>remainder</code>。</li><li>如果余数<code>remainder</code>在<code>half_width</code>范围内，或者大于<code>(cut_freq - half_width)</code>，则将该频域元素设置为0。</li><li>进行逆傅里叶变换并取实部，得到处理后的时域信号<code>y_new</code>。</li><li>写入输出文件。</li></ol><p>用Python写出来就是：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> apply_cut_frequencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">input_file</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">output_file</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">cut_freq</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">half_width</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    移除特定倍数的频率（带状滤波）。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    :param input_file: 输入音频文件路径</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    :param output_file: 处理后音频文件路径</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    :param cut_freq: 需要移除的频率间隔</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    :param half_width: 允许保留的频率范围</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    y, sr </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> librosa.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(input_file, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">sr</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">48000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    Y </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> np.fft.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">fft</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(y)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    freq </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> np.fft.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">fftfreq</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(y), </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">sr)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(Y)):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        f </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> abs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(freq[i])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        remainder </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> cut_freq</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> remainder </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> half_width </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">or</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> remainder </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (cut_freq </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> half_width):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            Y[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    y_new </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> np.fft.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">ifft</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(Y)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    y_new </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> np.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">real</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(y_new)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    sf.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(output_file, y_new, sr)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="节奏划分" tabindex="-1"><a class="header-anchor" href="#节奏划分"><span>节奏划分</span></a></h2><p>什么是节奏？</p><p>节奏，作为音乐的核心要素之一，是指音乐中音符有规律的长短组合与强弱交替。这种规律性的变化构成了音乐的基本韵律，如同心跳般赋予音乐生命力。</p><p>节奏的划分极为关键，不同的划分方式会产生不同的节拍。例如，当我们把音乐的时间流按照特定的模式分割时，就形成了诸如 2/4 拍、3/4 拍、4/4 拍等不同的节拍类型。</p><p>发挥想象力，如果交换一首歌的第二拍和第四拍，那么是不是会带来一种非常后现代的错乱风格呢？<strong>交换节拍</strong>这一想法看似简单，实际上实现起来有诸多需要考虑的地方：</p><ol><li>利用<code>AudioSegment.from_file</code>函数加载音频文件，获取音频片段<code>audio_segment</code>，并获取其位深度<code>bit_depth</code>。</li><li>借助<code>tempfile.NamedTemporaryFile</code>创建一个临时的WAV文件，将音频片段以WAV格式导出到该临时文件中。之所以这样做，是因为后续的一些音频处理操作在WAV格式下更为便捷。</li><li>使用<code>soundfile.read</code>函数读取临时WAV文件的音频数据<code>audio</code>和采样率<code>sr</code>，并将音频数据转换为二维数组并转置。</li><li>运用<code>librosa.to_mono</code>函数将音频数据转换为单声道（前提是音频原本为立体声），然后使用<code>librosa.beat.beat_track</code>函数获取音频的节奏信息，包括节拍速度<code>tempo</code>和节拍帧<code>beat_frames</code>。</li><li>初始化一些变量，比如交叉渐变时间<code>crossfade_duration</code>和总采样点数<code>total_samples</code>。</li><li>遍历节拍帧，将音频分割成一个个片段<code>segment</code>，每个片段包含一个节拍及其前后的交叉渐变部分。在分割过程中，对每个片段的开头和前一个片段的结尾进行交叉渐变处理，目的是<strong>避免音频拼接时出现明显的跳跃</strong>。交叉渐变通过在一定时间范围内（<code>crossfade_duration</code>）线性改变音频的增益来达成。</li><li>将分割好的片段存储在<code>segments</code>列表中。</li><li>对<code>segments</code>列表中的片段进行分组，每4个片段为一组。在每组中，交换第2和第4个片段的位置，然后将处理后的组重新合并到<code>new_segments</code>列表中。</li><li>将<code>new_segments</code>列表中的所有片段沿时间轴拼接起来，得到处理后的音频数据<code>processed_audio</code>。</li><li>根据输出文件的格式（<code>.wav</code>或<code>.mp3</code>），采用相应的方法将处理后的音频数据写入输出文件。如果是<code>.wav</code>格式，直接使用<code>soundfile.write</code>函数；如果是<code>.mp3</code>格式，先将处理后的音频数据写入一个临时WAV文件，然后使用<code>AudioSegment.from_wav</code>将临时WAV文件转换为MP3格式并导出，最后删除临时WAV文件。如果输出文件格式不被支持，则抛出<code>ValueError</code>异常。</li></ol><p>用Python写出来就是：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> swap_beats</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">input_file</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">output_file</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    交换每组的第2和第4拍，以产生新的节奏感。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    :param input_file: 输入音频文件路径</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    :param output_file: 处理后音频文件路径</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    audio_segment </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> AudioSegment.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">from_file</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(input_file)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    bit_depth </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> audio_segment.sample_width </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    with</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> tempfile.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">NamedTemporaryFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">suffix</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;.wav&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">delete</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> tmp:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        wav_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> tmp.name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        audio_segment.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(wav_path, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">format</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;wav&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;-acodec&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;pcm_s</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">le&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(bit_depth)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    audio, sr </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> sf.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(wav_path, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">always_2d</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">dtype</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;float32&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    audio </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> audio.T</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    os.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(wav_path)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    y_mono </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> librosa.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">to_mono</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(audio) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> audio.shape[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> audio[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    tempo, beat_frames </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> librosa.beat.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">beat_track</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">y_mono, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">sr</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">sr, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">units</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;samples&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    segments </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    crossfade_duration </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 512</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  # 交叉渐变时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    total_samples </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> audio.shape[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(beat_frames)):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        start </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> max</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, beat_frames[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> crossfade_duration</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        end </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> beat_frames[i</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> crossfade_duration</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(beat_frames)</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> total_samples</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        segment </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> audio[:, start:end]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            fade_in </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> np.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">linspace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, crossfade_duration)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            segment[:, :crossfade_duration] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> fade_in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            prev_segment[:, </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">crossfade_duration:] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> fade_in)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            segments[</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> prev_segment</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        segments.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(segment)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        prev_segment </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> segment.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    new_segments </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(segments), </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        group </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> segments[i:i</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(group) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            group[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">], group[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> group[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(), group[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        new_segments.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">extend</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(group)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    processed_audio </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> np.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">concatenate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(new_segments, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">axis</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> output_file.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">lower</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">endswith</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;.wav&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        sf.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(output_file, processed_audio.T, sr, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">subtype</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;PCM_</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">bit_depth</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    elif</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> output_file.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">lower</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">endswith</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;.mp3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> tempfile.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">NamedTemporaryFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">suffix</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;.wav&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">delete</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> tmp:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            tmp_wav </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> tmp.name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            sf.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(tmp_wav, processed_audio.T, sr, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">subtype</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;PCM_</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">bit_depth</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        AudioSegment.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">from_wav</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(tmp_wav).</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(output_file, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">format</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;mp3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">bitrate</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;320k&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;-ar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(sr), </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;-q:a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        os.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(tmp_wav)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        raise</span><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;"> ValueError</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Unsupported format&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40);function C(m,f){const t=e("Tabs");return r(),p("div",null,[y,i("div",o,[c,A,d(t,{id:"13",data:[{id:"pip"},{id:"conda"}],"tab-id":"python_install"},{title0:s(({value:a,isActive:n})=>[l("pip")]),title1:s(({value:a,isActive:n})=>[l("conda")]),tab0:s(({value:a,isActive:n})=>[F]),tab1:s(({value:a,isActive:n})=>[E]),_:1})]),u])}const b=k(g,[["render",C],["__file","audio_effect.html.vue"]]),_=JSON.parse('{"path":"/posts/coding/audio_effect.html","title":"给歌曲加点特效","lang":"zh-CN","frontmatter":{"title":"给歌曲加点特效","excerpt":"频域分析、节奏划分——用Python进行音频处理","date":"2025-03-07T00:00:00.000Z","isOriginal":true,"category":["Technology"],"tag":["Python","Fourier","BPM"],"description":"在音频处理的领域中，Python凭借其功能强大的库和简洁直观的语法，成为众多开发者进行音频处理工作的得力工具。并不，你见过哪个搞音乐的用Python？然而我是程序员，我用 本篇博客将简要介绍如何借助Python处理音频文件，以及记录几个比较实用的音频处理函数 。 我们主要利用Python中的numpy、librosa、soundfile和pydub库来...","head":[["meta",{"property":"og:url","content":"https://watanabechika.github.io/Wana_blog/posts/coding/audio_effect.html"}],["meta",{"property":"og:site_name","content":"Wana_Blog"}],["meta",{"property":"og:title","content":"给歌曲加点特效"}],["meta",{"property":"og:description","content":"在音频处理的领域中，Python凭借其功能强大的库和简洁直观的语法，成为众多开发者进行音频处理工作的得力工具。并不，你见过哪个搞音乐的用Python？然而我是程序员，我用 本篇博客将简要介绍如何借助Python处理音频文件，以及记录几个比较实用的音频处理函数 。 我们主要利用Python中的numpy、librosa、soundfile和pydub库来..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://watanabechika.github.io/Wana_blog/assets/images/audio-effect/Fourier.gif =500x"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-08T08:24:20.000Z"}],["meta",{"property":"article:author","content":"Wanakachi"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:tag","content":"Fourier"}],["meta",{"property":"article:tag","content":"BPM"}],["meta",{"property":"article:published_time","content":"2025-03-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-08T08:24:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"给歌曲加点特效\\",\\"image\\":[\\"https://watanabechika.github.io/Wana_blog/assets/images/audio-effect/Fourier.gif =500x\\"],\\"datePublished\\":\\"2025-03-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-08T08:24:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Wanakachi\\"}]}"]]},"headers":[{"level":2,"title":"MP3 vs. WAV","slug":"mp3-vs-wav","link":"#mp3-vs-wav","children":[]},{"level":2,"title":"频域分析","slug":"频域分析","link":"#频域分析","children":[{"level":3,"title":"模拟电话音效","slug":"模拟电话音效","link":"#模拟电话音效","children":[]},{"level":3,"title":"回声（眩晕）效果","slug":"回声-眩晕-效果","link":"#回声-眩晕-效果","children":[]},{"level":3,"title":"移除特定频率","slug":"移除特定频率","link":"#移除特定频率","children":[]}]},{"level":2,"title":"节奏划分","slug":"节奏划分","link":"#节奏划分","children":[]}],"git":{"createdTime":1741350995000,"updatedTime":1741422260000,"contributors":[{"name":"WatanabeChika","email":"2606354512@qq.com","commits":2}]},"readingTime":{"minutes":12.13,"words":3639},"filePathRelative":"posts/coding/audio_effect.md","localizedDate":"2025年3月7日","autoDesc":true}');export{b as comp,_ as data};
